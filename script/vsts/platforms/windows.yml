jobs:
  - job: Windows
    dependsOn: GetReleaseVersion
    timeoutInMinutes: 180
    strategy:
      maxParallel: 2
      matrix:
        x64:
          buildArch: x64
        x86:
          buildArch: x86

    pool:
      vmImage: vs2017-win2016

    variables:
      AppName: $[ dependencies.GetReleaseVersion.outputs['Version.AppName'] ]
      ReleaseVersion: $[ dependencies.GetReleaseVersion.outputs['Version.ReleaseVersion'] ]
      IsReleaseBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsReleaseBranch'] ]
      IsSignedZipBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsSignedZipBranch'] ]

    steps:
      - template: templates/preparation.yml

      - template: templates/cache.yml
        parameters:
          OS: windows

      - template: templates/bootstrap.yml

      - script: node script\vsts\windows-run.js script\lint.cmd
        env:
          BUILD_ARCH: $(buildArch)
        displayName: Run linter

      - template: templates/build.yml

      - script: node script\vsts\windows-run.js script\test.cmd
        env:
          CI: true
          CI_PROVIDER: VSTS
          ATOM_JASMINE_REPORTER: list
          TEST_JUNIT_XML_ROOT: $(Common.TestResultsDirectory)\junit
          BUILD_ARCH: $(buildArch)
        displayName: Run tests
        condition: and(succeeded(), ne(variables['Atom.SkipTests'], 'true'))

      - script: >
          node script\vsts\windows-run.js script\postprocess-junit-results.cmd
          --search-folder %TEST_JUNIT_XML_ROOT% --test-results-files "**/*.xml"
        env:
          TEST_JUNIT_XML_ROOT: $(Common.TestResultsDirectory)\junit
        displayName: Post-process test results
        condition: ne(variables['Atom.SkipTests'], 'true')

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          searchFolder: $(Common.TestResultsDirectory)\junit
          testResultsFiles: '**/*.xml'
          mergeTestResults: true
          testRunTitle: Windows $(buildArch)
        condition: ne(variables['Atom.SkipTests'], 'true')

      - script: |
          IF NOT EXIST "%ARTIFACT_STAGING_DIR%\crash-reports" MKDIR "%ARTIFACT_STAGING_DIR%\crash-reports"
          IF EXIST "%Temp%\Atom Crashes" (
            FOR %%a in ("%Temp%\Atom Crashes\*.dmp") DO XCOPY "%%a" "%ARTIFACT_STAGING_DIR%\crash-reports" /I
          )
        displayName: Stage crash reports
        condition: failed()
        env:
          ARTIFACT_STAGING_DIR: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)/crash-reports
          ArtifactName: crash-reports
        displayName: Publish crash reports on non-release branch
        condition: and(failed(), eq(variables['ATOM_RELEASES_S3_KEY'], ''))

      - script: >
          node $(Build.SourcesDirectory)\script\vsts\upload-crash-reports.js --crash-report-path "%ARTIFACT_STAGING_DIR%\crash-reports" --s3-path "vsts-artifacts/%BUILD_ID%/"
        env:
          ATOM_RELEASES_S3_KEY: $(ATOM_RELEASES_S3_KEY)
          ATOM_RELEASES_S3_SECRET: $(ATOM_RELEASES_S3_SECRET)
          ATOM_RELEASES_S3_BUCKET: $(ATOM_RELEASES_S3_BUCKET)
          ARTIFACT_STAGING_DIR: $(Build.ArtifactStagingDirectory)
          BUILD_ID: $(Build.BuildId)
        displayName: Upload crash reports to S3 on release branch
        condition: and(failed(), ne(variables['ATOM_RELEASES_S3_KEY'], ''))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/atom-x64-windows.zip
          ArtifactName: atom-x64-windows.zip
          ArtifactType: Container
        displayName: Upload atom-x64-windows.zip
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['buildArch'], 'x64'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/AtomSetup-x64.exe
          ArtifactName: AtomSetup-x64.exe
          ArtifactType: Container
        displayName: Upload AtomSetup-x64.exe
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x64'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/$(AppName)-x64-$(ReleaseVersion)-full.nupkg
          ArtifactName: $(AppName)-x64-$(ReleaseVersion)-full.nupkg
          ArtifactType: Container
        displayName: Upload $(AppName)-x64-$(ReleaseVersion)-full.nupkg
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x64'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/$(AppName)-x64-$(ReleaseVersion)-delta.nupkg
          ArtifactName: $(AppName)-x64-$(ReleaseVersion)-delta.nupkg
          ArtifactType: Container
        displayName: Upload $(AppName)-x64-$(ReleaseVersion)-delta.nupkg
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x64'))
        continueOnError: true # Nightly builds don't produce delta packages yet, so don't fail the build

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/RELEASES-x64
          ArtifactName: RELEASES-x64
          ArtifactType: Container
        displayName: Upload RELEASES-x64
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x64'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/atom-windows.zip
          ArtifactName: atom-windows.zip
          ArtifactType: Container
        displayName: Upload atom-windows.zip
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['buildArch'], 'x86'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/AtomSetup.exe
          ArtifactName: AtomSetup.exe
          ArtifactType: Container
        displayName: Upload AtomSetup.exe
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x86'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/$(AppName)-$(ReleaseVersion)-full.nupkg
          ArtifactName: $(AppName)-$(ReleaseVersion)-full.nupkg
          ArtifactType: Container
        displayName: Upload $(AppName)-$(ReleaseVersion)-full.nupkg
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x86'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/$(AppName)-$(ReleaseVersion)-delta.nupkg
          ArtifactName: $(AppName)-$(ReleaseVersion)-delta.nupkg
          ArtifactType: Container
        displayName: Upload $(AppName)-$(ReleaseVersion)-delta.nupkg
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x86'))
        continueOnError: true # Nightly builds don't produce delta packages yet, so don't fail the build

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/out/RELEASES
          ArtifactName: RELEASES
          ArtifactType: Container
        displayName: Upload RELEASES
        condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'), eq(variables['buildArch'], 'x86'))
